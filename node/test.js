function func() {
  // 返回一个箭头函数
  return a => {
    //this 继承自 func()
    console.log(this.a);
  };
}
var obj1 = {
  a: 2
};
var obj2 = {
  a: 3
};

// 对于堆栈的概念，一直不太了解，那么究竟什么是堆， 什么又是栈呢？接下来， 我们就来看看它们各自的概念 。

// 栈， 是硬件， 主要作用表现为一种数据结构， 是只能在一端插入和删除数据的特殊线性表。允许进行插入和删除操作的一端称为栈顶， 另一端为栈底。栈按照后进先出的原则存储数据， 最先进入的数据被压入栈底， 最后进入的数据在栈顶， 需要读数据时从栈顶开始弹出数据。栈底固定， 而栈顶浮动。栈中元素个数为零时称为空栈。插入一般称为进栈(push) , 删除则称为出栈(pop) 。栈也被称为先进后出表， 在函数调用的时候用于存储断点， 在递归时也要用到栈。

// 在计算机系统中， 栈则是一个具有以上属性的动态内存区域。程序可以将数据压入栈中， 也可以将数据从栈顶弹出。在i386机器中， 栈顶由称为esp的寄存器进行定位。压栈的操作使栈顶的地址减小， 弹出的操作使栈顶的地址增大。

// 栈在程序的运行中有着举足轻重的作用。最重要的是， 栈保存了一个函数调用时所需要的维护信息， 这常常被称为堆栈帧。栈一般包含以下两方面的信息：
// 1） 函数的返回地址和参数。
// 2） 临时变量：包括函数的非静态局部变量及编译器自动生成的其他临时变量。

// 堆， 是一种动态存储结构， 实际上就是数据段中的自由存储区， 它是C语言中使用的一种名称， 常常用于存储、 分配动态数据。堆中存入的数据地址向增加方向变动。堆可以不断进行分配直到没有堆空间为止， 也可以随时进行释放、 再分配， 不存在顺序问题。

// 堆内存的分配常通过malloc() 、 calloc() 、 realloc() 三个函数来实现。而堆内存的释放则使用free() 函数。
// 堆和栈在使用时“生长”方向相反， 栈向低地址方向“生长”， 而堆向高地址方向“生长”。

// 摘自C语言教材。

var bar = func.call(obj1);
bar.call(obj2); //>> 2    